version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.1

workflows:
  build:
    jobs:
      - darwin-amd64:
          name: darwin-amd64
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - darwin-arm64:
          name: darwin-arm64
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - linux-amd64:
          name: linux-amd64
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - linux-arm64:
          name: linux-arm64
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - linux-amd64-apline:
          name: linux-amd64-apline
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - docker-image-build:
          name: docker-image-build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build-docker-push-latest:
          name: build-docker-push-latest
          requires:
            - docker-image-build
          filters:
            branches:
              only: master

      - build-docker-push-tag:
          name: build-docker-push-tag
          requires:
            - docker-image-build
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

      - release-artifacts-s3:
          name: s3-artifacts
          requires:
            - darwin-amd64
            - darwin-arm64
            - linux-amd64
            - linux-arm64
            - linux-amd64-apline
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

jobs:

  darwin-amd64:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Prep for build
          command: |
            mkdir ~/artifacts
      - run:
          name: Build amd64 darwin
          command: |
            GOOS=darwin GOARCH=amd64 go build -ldflags "-X 'main.Version=<< pipeline.git.tag >>' -X 'main.GitCommit=<< pipeline.git.revision >>'" -o ~/artifacts/darwin-amd64.bin
            chmod +x ~/artifacts/darwin-amd64.bin
      - store_artifacts:
          path: ~/artifacts/darwin-amd64.bin
          destination: darwin-amd64.bin
      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - '*.bin'

  darwin-arm64:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Prep for build
          command: |
            mkdir ~/artifacts
      - run:
          name: Build arm64 darwin
          command: |
            GOOS=darwin GOARCH=arm64 go build -ldflags "-X 'main.Version=<< pipeline.git.tag >>' -X 'main.GitCommit=<< pipeline.git.revision >>'" -o ~/artifacts/darwin-arm64.bin
            chmod +x ~/artifacts/darwin-arm64.bin
      - store_artifacts:
          path: ~/artifacts/darwin-arm64.bin
          destination: darwin-arm64.bin
      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - '*.bin'

  linux-amd64:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Prep for build
          command: |
            mkdir ~/artifacts
      - run:
          name: Build amd64 linux
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags "-X 'main.Version=<< pipeline.git.tag >>' -X 'main.GitCommit=<< pipeline.git.revision >>'" -o ~/artifacts/linux-amd64.bin
            chmod +x ~/artifacts/linux-amd64.bin
      - run:
          name: Start local-kms for testing
          background: true
          command: |
            PORT=4599 ~/artifacts/linux-amd64.bin
      - run:
          name: Waiting for local-kms to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 4599 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for local-kms && exit 1
      - run:
          name: Run tests
          command: |
            sudo apt update && sudo apt install python3-pip
            cd tests/functional
            pip3 install -r requirments.txt
            pytest
      - store_artifacts:
          path: ~/artifacts/linux-amd64.bin
          destination: linux-amd64.bin
      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - '*.bin'
            
  linux-arm64:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Prep for build
          command: |
            mkdir ~/artifacts
      - run:
          name: Build arm64 linux
          command: |
            GOOS=linux GOARCH=arm64 go build -ldflags "-X 'main.Version=<< pipeline.git.tag >>' -X 'main.GitCommit=<< pipeline.git.revision >>'" -o ~/artifacts/linux-arm64.bin
            chmod +x ~/artifacts/linux-arm64.bin
      - store_artifacts:
          path: ~/artifacts/linux-arm64.bin
          destination: linux-arm64.bin
      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - '*.bin'

  linux-amd64-apline:
    working_directory: /go/src/github.com/nsmithuk/local-kms
    docker:
      - image: golang:1.17-alpine
    steps:
      - checkout
      - run:
          name: Install git
          command: |
            apk add git
      - run:
          name: Prep for build
          command: |
            mkdir /artifacts
      - run:
          name: Build amd64 linux
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags "-X 'main.Version=<< pipeline.git.tag >>' -X 'main.GitCommit=<< pipeline.git.revision >>'" -o /artifacts/linux-amd64-alpine.bin
            chmod +x /artifacts/linux-amd64-alpine.bin
      - run:
          name: Start local-kms for testing
          background: true
          command: |
            PORT=4599 /artifacts/linux-amd64-alpine.bin
      - run:
          name: Waiting for local-kms to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 4599 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for local-kms && exit 1
      - run:
          name: Run tests
          command: |
            apk add --update --no-cache py3-pip gcc g++ make libffi-dev openssl-dev
            cd tests/functional
            pip3 install -r requirments.txt
            pytest
      - store_artifacts:
          path: /artifacts/linux-amd64-alpine.bin
          destination: linux-amd64-alpine.bin
      - persist_to_workspace:
          root: /artifacts
          paths:
            - '*.bin'

  docker-image-build:
    docker:
      - image: cimg/base:2021.11
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build local-kms images
          command: |
            docker buildx build --load --platform linux/amd64 -t local-kms:amd64 .
            docker buildx build --load --platform linux/arm64 -t local-kms:arm64 .
      - run:
          name: Build testing image
          command: |
            docker build -t testing tests/functional
      - run:
          name: Run Tests
          command: |
            docker run -d --name local-kms local-kms:amd64
            docker run -e KMS_URL="http://localhost:8080" --network container:local-kms testing pytest
      - run:
          name: Save local-kms images
          command: |
            docker save -o /tmp/local-kms-amd64.tar local-kms:amd64
            docker save -o /tmp/local-kms-arm64.tar local-kms:arm64
      - persist_to_workspace:
          root: /tmp
          paths:
            - local-kms-amd64.tar
            - local-kms-arm64.tar

  build-docker-push-latest:
    docker:
      - image: cimg/base:2021.11
    steps:
      - attach_workspace:
          at: ~/image
      - setup_remote_docker
      - run:
          name: Load local-kms images
          command: |
            docker load -i ~/image/local-kms-amd64.tar
            docker load -i ~/image/local-kms-arm64.tar
            docker images
      - run:
          name: Login to Docker Hub
          command: |
            echo $DOCKER_HUB_TOKEN | docker login -u nsmithuk --password-stdin
      - run:
          name: Push to Docker Hub
          command: |
            docker tag local-kms:amd64 nsmithuk/local-kms:amd64
            docker tag local-kms:arm64 nsmithuk/local-kms:arm64

            docker push nsmithuk/local-kms:amd64
            docker push nsmithuk/local-kms:arm64

            docker manifest create nsmithuk/local-kms:latest --amend nsmithuk/local-kms:amd64
            docker manifest create nsmithuk/local-kms:latest --amend nsmithuk/local-kms:arm64

            docker manifest push nsmithuk/local-kms:latest

  build-docker-push-tag:
    docker:
      - image: cimg/base:2021.11
    steps:
      - attach_workspace:
          at: ~/image
      - setup_remote_docker
      - run:
          name: Load local-kms image
          command: |
            docker load -i ~/image/local-kms-amd64.tar
            docker load -i ~/image/local-kms-arm64.tar
            docker images
      - run:
          name: Login to Docker Hub
          command: |
            echo $DOCKER_HUB_TOKEN | docker login -u nsmithuk --password-stdin
      - run:
          name: Push to Docker Hub
          command: |
            export VERSION_MAJOR=`echo << pipeline.git.tag >> | awk -F '.' '{print $1}'`
            echo "Version Full << pipeline.git.tag >>"
            echo "Version Major $VERSION_MAJOR"

            docker tag local-kms:amd64 nsmithuk/local-kms:amd64
            docker tag local-kms:arm64 nsmithuk/local-kms:arm64

            docker push nsmithuk/local-kms:amd64
            docker push nsmithuk/local-kms:arm64

            docker manifest create nsmithuk/local-kms:${VERSION_MAJOR} --amend nsmithuk/local-kms:amd64
            docker manifest create nsmithuk/local-kms:${VERSION_MAJOR} --amend nsmithuk/local-kms:arm64

            docker manifest create nsmithuk/local-kms:<< pipeline.git.tag >> --amend nsmithuk/local-kms:amd64
            docker manifest create nsmithuk/local-kms:<< pipeline.git.tag >> --amend nsmithuk/local-kms:arm64

            docker manifest push nsmithuk/local-kms:${VERSION_MAJOR}
            docker manifest push nsmithuk/local-kms:<< pipeline.git.tag >>

  release-artifacts-s3:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/artifacts
      - aws-cli/setup
      - run:
          name: Upload to S3
          command: |
            export VERSION_MAJOR=`echo << pipeline.git.tag >> | awk -F '.' '{print $1}'`
            echo "Version Full << pipeline.git.tag >>"
            echo "Version Major $VERSION_MAJOR"

            export ARCH=darwin-amd64
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/${VERSION_MAJOR}/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/<< pipeline.git.tag >>/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/localstack/v${VERSION_MAJOR}/local-kms.osx.bin

            export ARCH=darwin-arm64
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/${VERSION_MAJOR}/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/<< pipeline.git.tag >>/local-kms_${ARCH}.bin

            export ARCH=linux-amd64
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/${VERSION_MAJOR}/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/<< pipeline.git.tag >>/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/localstack/v${VERSION_MAJOR}/local-kms.linux.bin
            
            export ARCH=linux-arm64
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/${VERSION_MAJOR}/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/<< pipeline.git.tag >>/local-kms_${ARCH}.bin
            
            # ARM64 Apline don't not need its own special build, so we can use linux-arm64
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/${VERSION_MAJOR}/local-kms_${ARCH}-alpine.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/<< pipeline.git.tag >>/local-kms_${ARCH}-alpine.bin
            
            export ARCH=linux-amd64-alpine
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/${VERSION_MAJOR}/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/<< pipeline.git.tag >>/local-kms_${ARCH}.bin
            aws s3 cp ~/artifacts/$ARCH.bin s3://local-kms/localstack/v${VERSION_MAJOR}/local-kms.alpine.bin

            # Access URL prefix: https://s3-eu-west-2.amazonaws.com/local-kms/
